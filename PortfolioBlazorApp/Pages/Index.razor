@page "/"
@inject HttpClient http
@using Portfolio.Shared


<header>
    <h1 class="page-title">My Personal Projects</h1>
    <br />
</header>
<body>
    @*<h5 class="bg-primary text-white text-center m-2 p-2">Create a Project</h5>*@
    <div class="m-2">
        <div asp-validation-summary="All"></div>
        <div class="form-group">
            <label asp-for="Title">Project Title:</label>
            <input @bind-value="newProjectName" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="Body">Requirements: </label>
            <input @bind-value="newProjectRequirements" class="form-control" rows="4">
        </div>
        <div class="form-group">
            <label asp-for="Body">Design: </label>
            <input @bind-value="newProjectDesign" class="form-control" rows="4">
        </div>
        <div class="form-group">
            <label asp-for="Body">Completion Date: </label>
            <input @bind-value="newProjectCompletionDate" type="date" />
        </div>
        <div>
        </div>
        <button @onclick="addProject" class="btn btn-primary">Add Project</button>
    </div>
</body>




<hr />
<h3>List of Projects</h3>
<ul>
    @foreach (var p in projects)
    {
<li>
    <a href="/ProjectDetails/@p.Id"> @p.Title</a>
    <button class="btn btn-primary">Remove </button>
</li>
}
</ul>







@code { private string newProjectName;
    private string newProjectRequirements;
    private string newProjectDesign;
    private DateTime newProjectCompletionDate;


    private IEnumerable<Project> projects = new List<Project>();

    private async Task addProject()
    {
        var project = new Project
        {
            Title = newProjectName,
            Requirements = newProjectRequirements,
            Design = newProjectDesign,
            CompletionDate = newProjectCompletionDate
        };
        try
        {
            var response = await http.PostAsJsonAsync("/api/project/", project);
        }
        catch (Exception e)
        {
        }
        await RefreshProjectsAsync();
    }
    //private async Task removeProject()
    //{
    //    await http.DeleteAsync("", project);
    //}



    private async Task loadProjects()
    {
        var response = await http.GetStringAsync("/api/project/");
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshProjectsAsync();
    }

    private async Task RefreshProjectsAsync()
    {
        projects = await http.GetFromJsonAsync<IEnumerable<Project>>("/api/project/");
    } }