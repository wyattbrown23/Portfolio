@page "/projectdetails/{ProjectId:int}"
@inject HttpClient http
@inject PortfolioBlazorApp.ProjectApiService projectApi
@using Portfolio.Shared
@using Portfolio.Shared.ViewModels



<h1 class="page-title">Details for @projectName</h1>
<div class="col-12 row">
    <div class="col-2">
    </div>
    <div class="col-10 row">
        <div class="col-xs-12 col-sm-8">
            <div class="form-group row">
                <label class="col-sm-4 col-form-label">Project ID</label>
                <div class="col-sm-8">
                    <label type="text" class="form-control-plaintext">@ProjectId</label>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label">Title</label>
                <div class="col-sm-8">
                    <label type="text" readonly class="form-control-plaintext">@projectName</label>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label">Project Requirement</label>
                <div class="col-sm-8">
                    <label type="text" readonly class="form-control-plaintext">@projectRequirements</label>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label">Project Design</label>
                <div class="col-sm-8">
                    <label type="text" readonly class="form-control-plaintext">@projectDesign</label>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-4 col-form-label">Completion Date</label>
                <div class="col-sm-8">
                    <label type="text" readonly class="form-control-plaintext">@projectCompletionDate.ToShortDateString()</label>
                </div>

                <div>
                    <div><a href="./language">Languages</a></div>
                    <div><input @bind-value="newLanguage" /><button @onclick="assignLanguage">Add</button></div>
                    <ul>
                        @foreach (var lang in LanguageList)
                        {
            <li><a href="langauge/@lang.Id">@lang.Name</a></li>            }
                    </ul>
                </div>

                <div>
                    <div><a href="./platform">Platforms</a></div>
                    <div><input @bind-value="newPlatform" /><button @onclick="assignPlatform">Add</button></div>
                    <ul>
                        @foreach (var plat in PlatformList)
                        {
            <li><a href="platform/@plat.Id">@plat.Name</a></li>            }
                    </ul>
                </div>

                <div>
                    <div><a href="./technology">Technology</a></div>
                    <div><input @bind-value="newTechnology" /><button @onclick="assignTechnology">Add</button></div>
                    <ul>
                        @foreach (var tech in TechnologyList)
                        {
            <li><a href="technology/@tech.Id">@tech.Name</a></li>}
                    </ul>
                </div>

            </div>
        </div>
    </div>
</div>


<hr />
<h4>Edit Project</h4>

<div class="form-group">
    <label asp-for="Title">Project Title:</label>
    <input @bind-value="@projectName" class="form-control" />
</div>
<div class="form-group">
    <label asp-for="Body">Requirements: </label>
    <input @bind-value="@projectRequirements" class="form-control" rows="4">
</div>
<div class="form-group">
    <label asp-for="Body">Design: </label>
    <input @bind-value="@projectDesign" class="form-control" rows="4">
</div>
<div class="form-group">
    <label asp-for="Body">Completion Date: </label>
    <input @bind-value="projectCompletionDate" type="date" />
</div>
<button @onclick="updateProject">save</button>




@code { [Parameter]
    public int ProjectId { get; set; }
    public int Id { get; set; }
    string newLanguage;
    string newPlatform;
    string newTechnology;



    private string projectName;
    private string projectRequirements;
    private string projectDesign;
    private DateTime projectCompletionDate;



    public ProjectViewModel SelectedProject { get; set; } = new ProjectViewModel();
    public Project project { get; set; } = new Project();

    public IEnumerable<BasicLanguage> LanguageList = new List<BasicLanguage>();
    public IEnumerable<BasicPlatform> PlatformList = new List<BasicPlatform>();
    public IEnumerable<BasicTechnology> TechnologyList = new List<BasicTechnology>();




    protected override async Task OnInitializedAsync()
    {
        if (ProjectId == 0)
            return;
        await refreshAsync();
    }



    private async Task updateProject()
    {
        var project = new Project
        {
            Id = ProjectId,
            Title = projectName,
            Requirements = projectRequirements,
            Design = projectDesign,
            CompletionDate = projectCompletionDate
        };
        try
        {
            var response = await http.PostAsJsonAsync("/api/project/update", project);
        }
        catch (Exception e)
        {
        }
    }



    async Task refreshAsync()
    {
        SelectedProject = (await http.GetFromJsonAsync<ProjectViewModel>($"/api/project/projectdetails/{ProjectId}"));

        projectName = SelectedProject.Title;
        projectRequirements = SelectedProject.Requirements;
        projectDesign = SelectedProject.Design;
        projectCompletionDate = SelectedProject.CompletionDate;

        LanguageList = SelectedProject.Languages;
        PlatformList = SelectedProject.Platforms;
        TechnologyList = SelectedProject.Technologies;
    }



    private async Task assignLanguage()
    {
        await projectApi.AssignAsync(Portfolio.Shared.Project.LanguageCategory, SelectedProject.Id, newLanguage);
        await refreshAsync();
    }

    private async Task assignPlatform()
    {
        await projectApi.AssignAsync(Portfolio.Shared.Project.PlatformCategory, SelectedProject.Id, newPlatform);
        await refreshAsync();
    }

    private async Task assignTechnology()
    {
        await projectApi.AssignAsync(Portfolio.Shared.Project.TechnologyCategory, SelectedProject.Id, newTechnology);
        await refreshAsync();
    } }